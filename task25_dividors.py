# надо уметь писать функцию, которая ищет все делители натурального числа
# в самом глупом случае, мы перебираем все числа от 1 до нашего числа
# но, учитывая что почти всегда делители идут парами
# пример 14 делится на 2, значит 14 делится и на 7 (14 // 2 = 7)
# в таком случае перебирать делители можно до корня из числа

def f(n):
    m = []  # список, куда буду помещать все найденные делители
    for d in range(1, int(n**0.5)+1): # перебираем от 1 до целого корня из числа
        if n % d == 0:    # пример: если 39 делится на 3, то
            m.append(d)   # в делители добавляю 3
            m.append(n // d) # в делители добавляю 13
# может быть баг (81 делится на 9, значит девятка запишется 2 раза)
# поэтому сделаем из списка множество (set), что удалит дубликаты
    m = set(m)
# имеет смысл возвращать делители отсортированными
    return sorted(m)  # при этом множество станет обратно списком


# print(f(100))
# [1, 2, 4, 5, 10, 20, 25, 50, 100] работает)

# задача 19721
for n in range(178965, 178982+1):
    m = f(n)
    if len(m) == 4:
        print(n, m)

# задача 19889
for n in range(902714+1, 902714+50):
    dels = f(n)
    dels = [x for x in dels if x%10 == 5 and x != 5 and x != n]
    if dels:
        print(n, dels)

# задача 19779
# ищем все делители числа, проверяем есть
# ли среди них оканчивающиеся на 777,
# проверяем этот делитель на простоту

for n in range(55_000_000+1, 55_000_000+5_000_000):
    d = f(n)
    d = [x for x in d if x % 1000 == 777]
    d = [x for x in d if len(f(x)) == 2]
    if d:
        print(n, d)



